

*** Running Csgrouper

Once installed, Csgrouper can be started with the default piece by entering 

	~/Csgrouper/run/csgrouper
    
at the command line. Optionally, you can add an argument which is the name
of a project file:

    ~/Csgrouper/run/csgrouper project_file.xml

This command is equivalent to :

	~/Csgrouper/lib/csgrouper.pl project_file.xml


*** Playing audio

Once a set of sequences is defined, click the "Eval" button in the 
"Sequences" tab or the "CSD" tab to check it. If it passes, click the "Rewrite"
button in the "CSD" tab to save it, then the "Play" button from the "CSD" tab
to actualy play it.

You can comment out sequences to prevent them from playing by entering them as
a comma-separated list into the (name here) field on the "CSD" tab; don't deselect
them in the "Sequences" tab, as this modifies the structure of the project and
changes the nature of all of the output, as opposed to simply silencing portions
of it.


*** The importance of modes

You should be aware that the "mode" is the most important field in any 
Csgrouper setup, either in the "Sequences" tab or the "Series" tab. If this 
field is not correctly filled out, Csgrouper *will* fail at some point. 

The idea is simple: the number of notes you list in the "mode" field must match
the number in the "base" field. For example, if you set the "base" field to 14,
yoju must also enter 14 signs in the "mode" field.

Currently, there is a bug in the default "Series" tab: the "base" is set to 18,
but the "mode" only contains 12 signs, which will cause several things to fail.

If you want to set up to use a particular musical mode, you'll need to replace
some of the signs with identical, duplicate ones. For instance, if "base" is set
to "12" and the mode is "0123456789AB", this defines a standard 12-tone chromatic
scale. To switch this to the classical Dorian mode, you'd need to replace unwanted
notes with notes you *do* want. In our example, this would be "00224557799B", 
replacing the half-steps we don't want with duplicates of notes in the mode that
we do want. Csgrouper will proceed normally, but will only use the defined subset
of the notes you provided in the mode; where it would previously have used a "1"
(the second item in the chromatic scale) it will instead use the "0" (the 
second item in the mode we defined), and so on.


*** Diagnosing errors

When you're first starting out, it's easy to create a setup that will not 
pass evaluation. It's usually easiest to just go back to the default project
(in proj/xpace-flute.xml) by copying it to Csgrouper/run/default.xml and
restarting Csgrouper.

If Csgrouper refuses to play a score even though you've tested your Csound
setup and found it to be working, it may be that the Csgrouper/run/bkp 
directory is missing; this is the directory in which Csgrouper places the
Csound input files. The MANIFEST lists all of the files and directories 
that Csgrouper expects to have.

*** DEBUG mode

Csgrouper already prints a lot of descriptive output on the terminal, 
prefixed by ' *** DESCR', but running in DEBUG mode will output still more
information that may be useful in tracking down a problem.

You can turn on debugging for a particular subroutine, for a group of them,
or for all.

a) To debug everything:

In the "Series" tab, type:

	~$Csgrouper::DEBFLAG = 1 

into the "cmd line" field and press the "Send" button. 

All commands prefixed with a '~' are interpreted as Perl one-liners, with 
access to the modules' globals. (Commands without the "~" are Csgrouper
function calls, which are mainly useful for for invoking set functions
from csg_Sets.pm.)

	~$Csgrouper::DEBFLAG = 0

will turn off debug output.

b) To debug specific subroutines, type:

	~$Csgrouper::DEBSUBS = "Csgrouper::struct_ctl Csgrouper::comp_tracks"
	
and only these subroutines (note that you should use their fully-qualified names)
will be debugged.

c) To permanently turn on debugging for a specific single subroutine:

	Edit the subroutine's code to add a "$DEBFLAG = 1;"  at the beginning.

EOF
